{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 31, "column": 0}, "map": {"version":3,"sources":["file:///mnt/windows_d/manov/code/polytix-v1/app/campaigns/%5Bid%5D/register-tab.jsx"],"sourcesContent":["\"use client\"\n\nimport { useState } from \"react\"\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle, CardFooter } from \"@/components/ui/card\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport { Alert, AlertDescription, AlertTitle } from \"@/components/ui/alert\"\nimport { AlertCircle, CheckCircle, Key, UserPlus, User, FileImage, MessageSquare, Loader2 } from \"lucide-react\"\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\"\nimport { Textarea } from \"@/components/ui/textarea\"\nimport { toast } from \"sonner\"\n\nexport default function RegisterTab({\n  campaignInfo,\n  contract,\n  campaignId,\n  isConnected,\n  connectWallet,\n  onRegistrationSuccess,\n}) {\n  const [passKey, setPassKey] = useState(\"\")\n  const [isSubmitting, setIsSubmitting] = useState(false)\n  const [error, setError] = useState(null)\n  const [success, setSuccess] = useState(null)\n  const [registrationType, setRegistrationType] = useState(\"voter\")\n\n  // Candidate registration fields\n  const [candidateName, setCandidateName] = useState(\"\")\n  const [candidateStatement, setCandidateStatement] = useState(\"\")\n  const [candidateImage, setCandidateImage] = useState(\"\")\n  const [candidatePassKey, setCandidatePassKey] = useState(\"\")\n  const [imageUploading, setImageUploading] = useState(false)\n\n  const handleRegisterAsVoter = async () => {\n    if (!isConnected) {\n      await connectWallet()\n      return\n    }\n\n    if (campaignInfo.restriction === 2 && !passKey.trim()) {\n      setError(\"Please enter the required passkey\")\n      return\n    }\n\n    try {\n      setIsSubmitting(true)\n      setError(null)\n      setSuccess(null)\n\n      // Call contract to register\n      const tx = await contract.registerToVote(campaignId, passKey)\n      await tx.wait()\n\n      setSuccess(\"You have successfully registered for this campaign!\")\n\n      // Notify parent component\n      if (onRegistrationSuccess) {\n        setTimeout(() => {\n          onRegistrationSuccess()\n        }, 2000)\n      }\n    } catch (err) {\n      console.error(\"Error registering:\", err)\n      setError(\"Failed to register. Please check your passkey and try again.\")\n    } finally {\n      setIsSubmitting(false)\n    }\n  }\n\n  const handleImageUpload = async (e) => {\n    const file = e.target.files[0]\n    if (!file) return\n\n    try {\n      setImageUploading(true)\n\n      // Create form data for file upload\n      const formData = new FormData()\n      formData.append(\"file\", file)\n\n      // Upload to our API endpoint\n      const response = await fetch(\"/api/upload\", {\n        method: \"POST\",\n        body: formData,\n      })\n\n      const data = await response.json()\n\n      if (!response.ok) {\n        throw new Error(data.error || \"Failed to upload image\")\n      }\n\n      // Use the IPFS hash returned from the API\n      setCandidateImage(data.ipfsHash)\n      toast.success(\"Image uploaded successfully to IPFS!\")\n    } catch (error) {\n      console.error(\"Error uploading image:\", error)\n      toast.error(\"Failed to upload image. Please try again.\")\n    } finally {\n      setImageUploading(false)\n    }\n  }\n\n  const handleRegisterAsCandidate = async () => {\n    if (!isConnected) {\n      await connectWallet()\n      return\n    }\n\n    // Validate inputs\n    if (!candidateName.trim()) {\n      setError(\"Please enter your name\")\n      return\n    }\n\n    if (!candidateStatement.trim()) {\n      setError(\"Please enter your statement\")\n      return\n    }\n\n    if (campaignInfo.restriction === 2 && !candidatePassKey.trim()) {\n      setError(\"Please enter the required passkey\")\n      return\n    }\n\n    try {\n      setIsSubmitting(true)\n      setError(null)\n      setSuccess(null)\n\n      // Call contract to register as candidate\n      const tx = await contract.registerAsCandidate(\n        campaignId,\n        candidateName,\n        candidateStatement,\n        candidateImage || \"no-image\", // Use a default if no image was uploaded\n        candidatePassKey,\n      )\n      await tx.wait()\n\n      setSuccess(\"You have successfully registered as a candidate for this campaign!\")\n\n      // Notify parent component\n      if (onRegistrationSuccess) {\n        setTimeout(() => {\n          onRegistrationSuccess()\n        }, 2000)\n      }\n    } catch (err) {\n      console.error(\"Error registering as candidate:\", err)\n      setError(\"Failed to register as candidate. Please check your inputs and try again.\")\n    } finally {\n      setIsSubmitting(false)\n    }\n  }\n\n  if (!isConnected) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <UserPlus className=\"h-5 w-5 text-primary\" />\n            Connect Wallet to Register\n          </CardTitle>\n          <CardDescription>You need to connect your wallet to register for this campaign</CardDescription>\n        </CardHeader>\n        <CardContent className=\"text-center py-8\">\n          <UserPlus className=\"h-16 w-16 mx-auto text-muted-foreground/50 mb-4\" />\n          <p className=\"text-muted-foreground mb-6\">Connect your wallet to register and participate in this campaign</p>\n          <Button onClick={connectWallet}>Connect Wallet</Button>\n        </CardContent>\n      </Card>\n    )\n  }\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <UserPlus className=\"h-5 w-5 text-primary\" />\n          Register for Campaign\n        </CardTitle>\n        <CardDescription>Register to participate in this campaign</CardDescription>\n      </CardHeader>\n      <CardContent>\n        {error && (\n          <Alert variant=\"destructive\" className=\"mb-4\">\n            <AlertCircle className=\"h-4 w-4\" />\n            <AlertTitle>Error</AlertTitle>\n            <AlertDescription>{error}</AlertDescription>\n          </Alert>\n        )}\n\n        {success && (\n          <Alert className=\"bg-green-50 text-green-800 border-green-200 mb-4\">\n            <CheckCircle className=\"h-4 w-4 text-green-500\" />\n            <AlertTitle>Success</AlertTitle>\n            <AlertDescription>{success}</AlertDescription>\n          </Alert>\n        )}\n\n        <Tabs defaultValue=\"voter\" onValueChange={setRegistrationType} className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-2 mb-6\">\n            <TabsTrigger value=\"voter\">Register as Voter</TabsTrigger>\n            {campaignInfo.votingType === 0 && ( // Only show for candidate-based campaigns\n              <TabsTrigger value=\"candidate\">Register as Candidate</TabsTrigger>\n            )}\n          </TabsList>\n\n          <TabsContent value=\"voter\">\n            <div className=\"space-y-4\">\n              {campaignInfo.restriction === 2 && (\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"passkey\">Passkey</Label>\n                  <div className=\"relative\">\n                    <Key className=\"absolute left-2.5 top-2.5 h-4 w-4 text-muted-foreground\" />\n                    <Input\n                      id=\"passkey\"\n                      type=\"password\"\n                      placeholder=\"Enter campaign passkey\"\n                      className=\"pl-9\"\n                      value={passKey}\n                      onChange={(e) => setPassKey(e.target.value)}\n                    />\n                  </div>\n                  <p className=\"text-xs text-muted-foreground\">\n                    Enter the passkey provided by the campaign creator to register.\n                  </p>\n                </div>\n              )}\n\n              <div className=\"p-4 bg-muted/30 rounded-lg\">\n                <h3 className=\"text-sm font-medium mb-2\">About Voter Registration</h3>\n                <ul className=\"text-sm text-muted-foreground space-y-2\">\n                  <li>• By registering, you will receive an NFT representing your voting right</li>\n                  <li>• This NFT proves your eligibility to participate in this campaign</li>\n                  <li>• Registration must be completed before voting begins</li>\n                </ul>\n              </div>\n            </div>\n          </TabsContent>\n\n          {campaignInfo.votingType === 0 && (\n            <TabsContent value=\"candidate\">\n              <div className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"candidate-name\">Your Name</Label>\n                  <div className=\"relative\">\n                    <User className=\"absolute left-2.5 top-2.5 h-4 w-4 text-muted-foreground\" />\n                    <Input\n                      id=\"candidate-name\"\n                      placeholder=\"Enter your name\"\n                      className=\"pl-9\"\n                      value={candidateName}\n                      onChange={(e) => setCandidateName(e.target.value)}\n                    />\n                  </div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"candidate-statement\">Why Vote For You?</Label>\n                  <div className=\"relative\">\n                    <MessageSquare className=\"absolute left-2.5 top-2.5 h-4 w-4 text-muted-foreground\" />\n                    <Textarea\n                      id=\"candidate-statement\"\n                      placeholder=\"Share why people should vote for you\"\n                      className=\"pl-9 min-h-[120px]\"\n                      value={candidateStatement}\n                      onChange={(e) => setCandidateStatement(e.target.value)}\n                    />\n                  </div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"candidate-image\">Profile Image</Label>\n                  <div className=\"flex items-center gap-3\">\n                    <Button\n                      variant=\"outline\"\n                      className=\"relative\"\n                      disabled={imageUploading}\n                      onClick={() => document.getElementById(\"image-upload\").click()}\n                    >\n                      {imageUploading ? (\n                        <>\n                          <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                          Uploading...\n                        </>\n                      ) : (\n                        <>\n                          <FileImage className=\"h-4 w-4 mr-2\" />\n                          Upload Image\n                        </>\n                      )}\n                    </Button>\n                    <input\n                      id=\"image-upload\"\n                      type=\"file\"\n                      accept=\"image/*\"\n                      className=\"hidden\"\n                      onChange={handleImageUpload}\n                    />\n                    {candidateImage && (\n                      <div className=\"text-sm text-muted-foreground flex items-center\">\n                        <span>IPFS: {candidateImage.substring(0, 10)}...</span>\n                        {candidateImage && (\n                          <a \n                            href={`https://gateway.pinata.cloud/ipfs/${candidateImage}`} \n                            target=\"_blank\" \n                            rel=\"noopener noreferrer\"\n                            className=\"text-primary ml-2 text-xs hover:underline\"\n                          >\n                            View\n                          </a>\n                        )}\n                      </div>\n                    )}\n                  </div>\n                  <p className=\"text-xs text-muted-foreground\">\n                    Upload a profile image to represent you in the campaign (optional).\n                  </p>\n                </div>\n\n                {campaignInfo.restriction === 2 && (\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"candidate-passkey\">Passkey</Label>\n                    <div className=\"relative\">\n                      <Key className=\"absolute left-2.5 top-2.5 h-4 w-4 text-muted-foreground\" />\n                      <Input\n                        id=\"candidate-passkey\"\n                        type=\"password\"\n                        placeholder=\"Enter campaign passkey\"\n                        className=\"pl-9\"\n                        value={candidatePassKey}\n                        onChange={(e) => setCandidatePassKey(e.target.value)}\n                      />\n                    </div>\n                    <p className=\"text-xs text-muted-foreground\">\n                      Enter the passkey provided by the campaign creator to register.\n                    </p>\n                  </div>\n                )}\n\n                <div className=\"p-4 bg-muted/30 rounded-lg\">\n                  <h3 className=\"text-sm font-medium mb-2\">About Candidate Registration</h3>\n                  <ul className=\"text-sm text-muted-foreground space-y-2\">\n                    <li>• By registering as a candidate, you'll be eligible to receive votes</li>\n                    <li>• Your name and statement will be visible to all voters</li>\n                    <li>• You'll also be registered as a voter automatically</li>\n                    <li>• Candidate registration must be completed before voting begins</li>\n                  </ul>\n                </div>\n              </div>\n            </TabsContent>\n          )}\n        </Tabs>\n      </CardContent>\n      <CardFooter>\n        <Button\n          className=\"w-full\"\n          onClick={registrationType === \"voter\" ? handleRegisterAsVoter : handleRegisterAsCandidate}\n          disabled={\n            (registrationType === \"voter\" && campaignInfo.restriction === 2 && !passKey.trim()) ||\n            (registrationType === \"candidate\" &&\n              (!candidateName.trim() ||\n                !candidateStatement.trim() ||\n                (campaignInfo.restriction === 2 && !candidatePassKey.trim()))) ||\n            isSubmitting\n          }\n        >\n          {isSubmitting ? (\n            <>\n              <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n              {registrationType === \"voter\" ? \"Registering...\" : \"Registering as Candidate...\"}\n            </>\n          ) : registrationType === \"voter\" ? (\n            \"Register for Campaign\"\n          ) : (\n            \"Register as Candidate\"\n          )}\n        </Button>\n      </CardFooter>\n    </Card>\n  )\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 889, "column": 0}, "map": {"version":3,"sources":["file:///mnt/windows_d/manov/code/polytix-v1/app/campaigns/%5Bid%5D/results-tab.jsx"],"sourcesContent":["\"use client\"\n\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Trophy, AlertCircle, Medal, List } from \"lucide-react\"\nimport { formatAddress } from \"@/lib/utils\"\nimport {\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip as RechartsTooltip,\n  ResponsiveContainer,\n  PieChart,\n  Pie,\n  Cell,\n  Legend,\n  LineChart,\n  Line,\n} from \"recharts\"\n\nexport default function ResultsTab({ campaignInfo, proposals, candidates, isOwner = false }) {\n  // Sort items by vote count (descending)\n  const sortedProposals = [...proposals].sort((a, b) => b.voteCount - a.voteCount)\n  const sortedCandidates = [...candidates].sort((a, b) => b.voteCount - a.voteCount)\n\n  // Determine if there's a winner or tie\n  const getWinnerStatus = () => {\n    if (campaignInfo.votingType === 1 /* ProposalBased */) {\n      if (proposals.length === 0) return { hasTie: false, hasWinner: false }\n\n      const highestVotes = sortedProposals[0]?.voteCount || 0\n      const tiedWinners = sortedProposals.filter((p) => p.voteCount === highestVotes)\n\n      return {\n        hasTie: tiedWinners.length > 1,\n        hasWinner: highestVotes > 0,\n        tiedWinners,\n      }\n    } else {\n      if (candidates.length === 0) return { hasTie: false, hasWinner: false }\n\n      const highestVotes = sortedCandidates[0]?.voteCount || 0\n      const tiedWinners = sortedCandidates.filter((c) => c.voteCount === highestVotes)\n\n      return {\n        hasTie: tiedWinners.length > 1,\n        hasWinner: highestVotes > 0,\n        tiedWinners,\n      }\n    }\n  }\n\n  const winnerStatus = getWinnerStatus()\n\n  // Prepare data for charts\n  const prepareBarChartData = () => {\n    if (campaignInfo.votingType === 1) {\n      return proposals.map((p) => ({\n        name: `Proposal ${p.id + 1}`,\n        votes: p.voteCount,\n      }))\n    } else {\n      return candidates.map((c) => ({\n        name: c.name,\n        votes: c.voteCount,\n      }))\n    }\n  }\n\n  const preparePieChartData = () => {\n    if (campaignInfo.votingType === 1) {\n      return proposals.map((p) => ({\n        name: `Proposal ${p.id + 1}`,\n        value: p.voteCount,\n      }))\n    } else {\n      return candidates.map((c) => ({\n        name: c.name,\n        value: c.voteCount,\n      }))\n    }\n  }\n\n  // Prepare data for rank-based visualization\n  const prepareRankData = () => {\n    if (campaignInfo.votingType === 1) {\n      return sortedProposals.map((p, index) => ({\n        name: `Proposal ${p.id + 1}`,\n        votes: p.voteCount,\n        rank: index + 1,\n      }))\n    } else {\n      return sortedCandidates.map((c, index) => ({\n        name: c.name,\n        votes: c.voteCount,\n        rank: index + 1,\n      }))\n    }\n  }\n\n  const barChartData = prepareBarChartData()\n  const pieChartData = preparePieChartData()\n  const rankData = prepareRankData()\n\n  // Colors for pie chart\n  const COLORS = [\n    \"#0088FE\",\n    \"#00C49F\",\n    \"#FFBB28\",\n    \"#FF8042\",\n    \"#8884d8\",\n    \"#82ca9d\",\n    \"#ffc658\",\n    \"#8dd1e1\",\n    \"#a4de6c\",\n    \"#d0ed57\",\n  ]\n\n  // If no votes have been cast yet\n  if (campaignInfo.totalVotes === 0) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle>Results</CardTitle>\n          <CardDescription>No votes have been cast in this campaign yet.</CardDescription>\n        </CardHeader>\n        <CardContent className=\"text-center py-8\">\n          <AlertCircle className=\"h-16 w-16 mx-auto text-muted-foreground/50 mb-4\" />\n          <p className=\"text-muted-foreground\">Once votes are cast, results will be displayed here.</p>\n        </CardContent>\n      </Card>\n    )\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Results Header */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            {campaignInfo.resultType === 0 ? (\n              <>\n                <List className=\"h-5 w-5 text-primary\" />\n                Rank-Based Results\n              </>\n            ) : (\n              <>\n                <Trophy className=\"h-5 w-5 text-yellow-500\" />\n                One Winner Results\n              </>\n            )}\n          </CardTitle>\n          <CardDescription>\n            {campaignInfo.resultType === 0\n              ? \"Showing all options ranked by number of votes\"\n              : \"Showing the winning option with the highest number of votes\"}\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          {campaignInfo.resultType === 0 ? (\n            // Rank-Based Results\n            <div className=\"space-y-4\">\n              <div className=\"bg-muted/30 p-4 rounded-lg\">\n                <h3 className=\"font-medium mb-4 flex items-center\">\n                  <Medal className=\"h-5 w-5 mr-2 text-primary\" />\n                  Ranked Results\n                </h3>\n                <div className=\"space-y-3\">\n                  {rankData.map((item, index) => (\n                    <div key={index} className=\"flex items-center gap-4\">\n                      <div className=\"flex-shrink-0 w-8 h-8 rounded-full bg-primary/10 flex items-center justify-center\">\n                        <span className=\"font-bold\">{item.rank}</span>\n                      </div>\n                      <div className=\"flex-grow\">\n                        <div className=\"flex justify-between items-center mb-1\">\n                          <span className=\"font-medium\">{item.name}</span>\n                          <Badge variant=\"outline\">{item.votes} votes</Badge>\n                        </div>\n                        <div className=\"w-full bg-muted rounded-full h-2\">\n                          <div\n                            className=\"bg-primary h-2 rounded-full\"\n                            style={{\n                              width: `${\n                                campaignInfo.totalVotes > 0 ? (item.votes / campaignInfo.totalVotes) * 100 : 0\n                              }%`,\n                            }}\n                          ></div>\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            </div>\n          ) : (\n            // One Winner Results\n            <div>\n              {winnerStatus.hasWinner ? (\n                winnerStatus.hasTie ? (\n                  <div className=\"bg-amber-50 dark:bg-amber-950/20 border border-amber-200 dark:border-amber-900 rounded-lg p-4\">\n                    <h3 className=\"font-medium text-amber-800 dark:text-amber-300 flex items-center\">\n                      <Trophy className=\"h-5 w-5 mr-2 text-amber-600 dark:text-amber-400\" />\n                      Tie Between {winnerStatus.tiedWinners.length} Options\n                    </h3>\n                    <div className=\"mt-4 space-y-3\">\n                      {campaignInfo.votingType === 1 /* ProposalBased */\n                        ? winnerStatus.tiedWinners.map((proposal) => (\n                            <div key={proposal.id} className=\"bg-white dark:bg-gray-800 p-3 rounded-md\">\n                              <div className=\"flex justify-between items-center\">\n                                <h4 className=\"font-medium\">Proposal {proposal.id + 1}</h4>\n                                <Badge>{proposal.voteCount} votes</Badge>\n                              </div>\n                              <p className=\"text-sm mt-1 text-muted-foreground\">{proposal.content}</p>\n                            </div>\n                          ))\n                        : winnerStatus.tiedWinners.map((candidate) => (\n                            <div key={candidate.id} className=\"bg-white dark:bg-gray-800 p-3 rounded-md\">\n                              <div className=\"flex justify-between items-center\">\n                                <h4 className=\"font-medium\">{candidate.name}</h4>\n                                <Badge>{candidate.voteCount} votes</Badge>\n                              </div>\n                              <p className=\"text-xs text-muted-foreground\">{formatAddress(candidate.address)}</p>\n                              <p className=\"text-sm mt-1 text-muted-foreground\">{candidate.statement}</p>\n                            </div>\n                          ))}\n                    </div>\n                  </div>\n                ) : (\n                  <div className=\"bg-green-50 dark:bg-green-950/20 border border-green-200 dark:border-green-900 rounded-lg p-4\">\n                    {campaignInfo.votingType === 1 /* ProposalBased */ ? (\n                      <div>\n                        <h3 className=\"font-medium text-green-800 dark:text-green-300 flex items-center\">\n                          <Trophy className=\"h-5 w-5 mr-2 text-green-600 dark:text-green-400\" />\n                          Proposal {sortedProposals[0].id + 1} Won\n                        </h3>\n                        <Badge className=\"mt-2\">{sortedProposals[0].voteCount} votes</Badge>\n                        <p className=\"mt-3 text-green-700 dark:text-green-300\">{sortedProposals[0].content}</p>\n                        <p className=\"text-sm mt-2 text-green-600 dark:text-green-400\">\n                          This proposal received{\" \"}\n                          {Math.round((sortedProposals[0].voteCount / campaignInfo.totalVotes) * 100)}% of all votes.\n                        </p>\n                      </div>\n                    ) : (\n                      <div>\n                        <h3 className=\"font-medium text-green-800 dark:text-green-300 flex items-center\">\n                          <Trophy className=\"h-5 w-5 mr-2 text-green-600 dark:text-green-400\" />\n                          {sortedCandidates[0].name} Won\n                        </h3>\n                        <Badge className=\"mt-2\">{sortedCandidates[0].voteCount} votes</Badge>\n                        <p className=\"text-xs text-green-600 dark:text-green-400 mt-1\">\n                          {formatAddress(sortedCandidates[0].address)}\n                        </p>\n                        <p className=\"mt-2 text-green-700 dark:text-green-300\">{sortedCandidates[0].statement}</p>\n                        <p className=\"text-sm mt-2 text-green-600 dark:text-green-400\">\n                          This candidate received{\" \"}\n                          {Math.round((sortedCandidates[0].voteCount / campaignInfo.totalVotes) * 100)}% of all votes.\n                        </p>\n                      </div>\n                    )}\n                  </div>\n                )\n              ) : (\n                <div className=\"bg-muted/30 p-4 rounded-lg text-center\">\n                  <AlertCircle className=\"h-10 w-10 mx-auto text-muted-foreground mb-2\" />\n                  <p>No clear winner yet. Votes are still being tallied.</p>\n                </div>\n              )}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Charts */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Bar Chart */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Vote Distribution</CardTitle>\n            <CardDescription>Bar chart showing vote distribution across all options</CardDescription>\n          </CardHeader>\n          <CardContent className=\"h-[400px]\">\n            <ResponsiveContainer width=\"100%\" height=\"100%\">\n              <BarChart\n                data={barChartData}\n                margin={{\n                  top: 5,\n                  right: 30,\n                  left: 20,\n                  bottom: 60,\n                }}\n              >\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis dataKey=\"name\" angle={-45} textAnchor=\"end\" height={70} interval={0} />\n                <YAxis />\n                <RechartsTooltip\n                  formatter={(value, name) => [`${value} votes`, \"Votes\"]}\n                  labelFormatter={(label) => `Option: ${label}`}\n                />\n                <Bar dataKey=\"votes\" fill=\"#8884d8\" />\n              </BarChart>\n            </ResponsiveContainer>\n          </CardContent>\n        </Card>\n\n        {/* Pie Chart */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Percentage Breakdown</CardTitle>\n            <CardDescription>Pie chart showing percentage of votes for each option</CardDescription>\n          </CardHeader>\n          <CardContent className=\"h-[400px]\">\n            <ResponsiveContainer width=\"100%\" height=\"100%\">\n              <PieChart>\n                <Pie\n                  data={pieChartData}\n                  cx=\"50%\"\n                  cy=\"50%\"\n                  labelLine={false}\n                  label={({ name, percent }) => `${name}: ${(percent * 100).toFixed(0)}%`}\n                  outerRadius={80}\n                  fill=\"#8884d8\"\n                  dataKey=\"value\"\n                >\n                  {pieChartData.map((entry, index) => (\n                    <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n                  ))}\n                </Pie>\n                <RechartsTooltip formatter={(value) => [`${value} votes`, \"Votes\"]} />\n                <Legend />\n              </PieChart>\n            </ResponsiveContainer>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Rank Visualization (only for Rank-Based results) */}\n      {campaignInfo.resultType === 0 && (\n        <Card>\n          <CardHeader>\n            <CardTitle>Rank Visualization</CardTitle>\n            <CardDescription>Line chart showing the ranking of each option</CardDescription>\n          </CardHeader>\n          <CardContent className=\"h-[400px]\">\n            <ResponsiveContainer width=\"100%\" height=\"100%\">\n              <LineChart\n                data={rankData}\n                margin={{\n                  top: 5,\n                  right: 30,\n                  left: 20,\n                  bottom: 60,\n                }}\n              >\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis dataKey=\"name\" angle={-45} textAnchor=\"end\" height={70} interval={0} />\n                <YAxis\n                  reversed\n                  domain={[1, rankData.length]}\n                  label={{ value: \"Rank\", angle: -90, position: \"insideLeft\" }}\n                />\n                <RechartsTooltip\n                  formatter={(value, name) => [`Rank ${value}`, \"Position\"]}\n                  labelFormatter={(label) => `Option: ${label}`}\n                />\n                <Line type=\"monotone\" dataKey=\"rank\" stroke=\"#8884d8\" activeDot={{ r: 8 }} />\n              </LineChart>\n            </ResponsiveContainer>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Detailed Results Table */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Detailed Results</CardTitle>\n          <CardDescription>Complete breakdown of all voting options and their results</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {campaignInfo.votingType === 1 /* ProposalBased */\n              ? // Proposal results\n                sortedProposals.map((proposal, index) => (\n                  <div key={proposal.id} className=\"bg-background/60 p-4 rounded-lg\">\n                    <div className=\"flex justify-between items-center mb-2\">\n                      <div className=\"flex items-center\">\n                        {campaignInfo.resultType === 1 &&\n                          index === 0 &&\n                          !winnerStatus.hasTie &&\n                          proposal.voteCount > 0 && <Trophy className=\"h-4 w-4 text-yellow-500 mr-2\" />}\n                        {campaignInfo.resultType === 0 && (\n                          <div className=\"flex-shrink-0 w-6 h-6 rounded-full bg-primary/10 flex items-center justify-center mr-2\">\n                            <span className=\"text-xs font-bold\">{index + 1}</span>\n                          </div>\n                        )}\n                        <h3 className=\"font-medium\">Proposal {proposal.id + 1}</h3>\n                      </div>\n                      <Badge variant=\"secondary\">{proposal.voteCount} votes</Badge>\n                    </div>\n                    <p className=\"text-sm text-muted-foreground\">{proposal.content}</p>\n                    <div className=\"mt-2 w-full bg-muted rounded-full h-2.5\">\n                      <div\n                        className=\"bg-primary h-2.5 rounded-full\"\n                        style={{\n                          width: `${\n                            campaignInfo.totalVotes > 0 ? (proposal.voteCount / campaignInfo.totalVotes) * 100 : 0\n                          }%`,\n                        }}\n                      ></div>\n                    </div>\n                    <p className=\"text-xs text-right mt-1 text-muted-foreground\">\n                      {campaignInfo.totalVotes > 0\n                        ? Math.round((proposal.voteCount / campaignInfo.totalVotes) * 100)\n                        : 0}\n                      %\n                    </p>\n                  </div>\n                ))\n              : // Candidate results\n                sortedCandidates.map((candidate, index) => (\n                  <div key={candidate.id} className=\"bg-background/60 p-4 rounded-lg\">\n                    <div className=\"flex justify-between items-center mb-2\">\n                      <div className=\"flex items-center\">\n                        {campaignInfo.resultType === 1 &&\n                          index === 0 &&\n                          !winnerStatus.hasTie &&\n                          candidate.voteCount > 0 && <Trophy className=\"h-4 w-4 text-yellow-500 mr-2\" />}\n                        {campaignInfo.resultType === 0 && (\n                          <div className=\"flex-shrink-0 w-6 h-6 rounded-full bg-primary/10 flex items-center justify-center mr-2\">\n                            <span className=\"text-xs font-bold\">{index + 1}</span>\n                          </div>\n                        )}\n                        <h3 className=\"font-medium\">{candidate.name}</h3>\n                      </div>\n                      <Badge variant=\"secondary\">{candidate.voteCount} votes</Badge>\n                    </div>\n                    <p className=\"text-xs text-muted-foreground\">{formatAddress(candidate.address)}</p>\n                    <div className=\"mt-2 w-full bg-muted rounded-full h-2.5\">\n                      <div\n                        className=\"bg-primary h-2.5 rounded-full\"\n                        style={{\n                          width: `${\n                            campaignInfo.totalVotes > 0 ? (candidate.voteCount / campaignInfo.totalVotes) * 100 : 0\n                          }%`,\n                        }}\n                      ></div>\n                    </div>\n                    <p className=\"text-xs text-right mt-1 text-muted-foreground\">\n                      {campaignInfo.totalVotes > 0\n                        ? Math.round((candidate.voteCount / campaignInfo.totalVotes) * 100)\n                        : 0}\n                      %\n                    </p>\n                  </div>\n                ))}\n          </div>\n\n          {/* Summary */}\n          <div className=\"mt-6 pt-4 border-t border-border\">\n            <div className=\"flex justify-between text-sm\">\n              <span className=\"text-muted-foreground\">Total Votes:</span>\n              <span className=\"font-medium\">{campaignInfo.totalVotes}</span>\n            </div>\n            {campaignInfo.restriction !== 0 && (\n              <div className=\"flex justify-between text-sm mt-1\">\n                <span className=\"text-muted-foreground\">Registered Voters:</span>\n                <span className=\"font-medium\">{campaignInfo.registeredVoterCount}</span>\n              </div>\n            )}\n            <div className=\"flex justify-between text-sm mt-1\">\n              <span className=\"text-muted-foreground\">Participation Rate:</span>\n              <span className=\"font-medium\">\n                {campaignInfo.registeredVoterCount > 0\n                  ? Math.round((campaignInfo.totalVotes / campaignInfo.registeredVoterCount) * 100)\n                  : 0}\n                %\n              </span>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  )\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 2229, "column": 0}, "map": {"version":3,"sources":["file:///mnt/windows_d/manov/code/polytix-v1/app/campaigns/%5Bid%5D/countdown-timer.jsx"],"sourcesContent":["\"use client\"\n\nimport { useState, useEffect } from \"react\"\nimport { Progress } from \"@/components/ui/progress\"\n\nexport default function CampaignCountdown({ endTime, className = \"\" }) {\n  const [timeLeft, setTimeLeft] = useState({\n    days: 0,\n    hours: 0,\n    minutes: 0,\n    seconds: 0,\n    percentage: 0,\n  })\n\n  useEffect(() => {\n    const calculateTimeLeft = () => {\n      const now = Date.now()\n      const difference = endTime - now\n\n      if (difference <= 0) {\n        return {\n          days: 0,\n          hours: 0,\n          minutes: 0,\n          seconds: 0,\n          percentage: 100,\n        }\n      }\n\n      // Calculate time components\n      const days = Math.floor(difference / (1000 * 60 * 60 * 24))\n      const hours = Math.floor((difference % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60))\n      const minutes = Math.floor((difference % (1000 * 60 * 60)) / (1000 * 60))\n      const seconds = Math.floor((difference % (1000 * 60)) / 1000)\n\n      // Calculate percentage of time elapsed\n      // Assuming 7 days is the max duration for visualization purposes\n      const maxDuration = 7 * 24 * 60 * 60 * 1000 // 7 days in milliseconds\n      const elapsed = maxDuration - Math.min(difference, maxDuration)\n      const percentage = Math.min(100, Math.max(0, (elapsed / maxDuration) * 100))\n\n      return {\n        days,\n        hours,\n        minutes,\n        seconds,\n        percentage,\n      }\n    }\n\n    // Update the countdown every second\n    const timer = setInterval(() => {\n      setTimeLeft(calculateTimeLeft())\n    }, 1000)\n\n    // Initial calculation\n    setTimeLeft(calculateTimeLeft())\n\n    // Clean up the timer\n    return () => clearInterval(timer)\n  }, [endTime])\n\n  return (\n    <div className={`w-full ${className}`}>\n      <div className=\"grid grid-cols-4 gap-2 mb-4\">\n        <div className=\"text-center\">\n          <div className=\"text-3xl font-bold\">{timeLeft.days}</div>\n          <div className=\"text-xs text-muted-foreground\">Days</div>\n        </div>\n        <div className=\"text-center\">\n          <div className=\"text-3xl font-bold\">{timeLeft.hours}</div>\n          <div className=\"text-xs text-muted-foreground\">Hours</div>\n        </div>\n        <div className=\"text-center\">\n          <div className=\"text-3xl font-bold\">{timeLeft.minutes}</div>\n          <div className=\"text-xs text-muted-foreground\">Minutes</div>\n        </div>\n        <div className=\"text-center\">\n          <div className=\"text-3xl font-bold\">{timeLeft.seconds}</div>\n          <div className=\"text-xs text-muted-foreground\">Seconds</div>\n        </div>\n      </div>\n      <Progress value={timeLeft.percentage} className=\"h-2\" />\n    </div>\n  )\n}\n"],"names":[],"mappings":";;;;AAEA;;;;;;AAFA;;;;AAKe,SAAS,kBAAkB,EAAE,OAAO,EAAE,YAAY,EAAE,EAAE;IACnE,MAAM,CAAC,UAAU,YAAY,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;QACvC,MAAM;QACN,OAAO;QACP,SAAS;QACT,SAAS;QACT,YAAY;IACd;IAEA,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,MAAM,oBAAoB;YACxB,MAAM,MAAM,KAAK,GAAG;YACpB,MAAM,aAAa,UAAU;YAE7B,IAAI,cAAc,GAAG;gBACnB,OAAO;oBACL,MAAM;oBACN,OAAO;oBACP,SAAS;oBACT,SAAS;oBACT,YAAY;gBACd;YACF;YAEA,4BAA4B;YAC5B,MAAM,OAAO,KAAK,KAAK,CAAC,aAAa,CAAC,OAAO,KAAK,KAAK,EAAE;YACzD,MAAM,QAAQ,KAAK,KAAK,CAAC,AAAC,aAAa,CAAC,OAAO,KAAK,KAAK,EAAE,IAAK,CAAC,OAAO,KAAK,EAAE;YAC/E,MAAM,UAAU,KAAK,KAAK,CAAC,AAAC,aAAa,CAAC,OAAO,KAAK,EAAE,IAAK,CAAC,OAAO,EAAE;YACvE,MAAM,UAAU,KAAK,KAAK,CAAC,AAAC,aAAa,CAAC,OAAO,EAAE,IAAK;YAExD,uCAAuC;YACvC,iEAAiE;YACjE,MAAM,cAAc,IAAI,KAAK,KAAK,KAAK,KAAK,yBAAyB;;YACrE,MAAM,UAAU,cAAc,KAAK,GAAG,CAAC,YAAY;YACnD,MAAM,aAAa,KAAK,GAAG,CAAC,KAAK,KAAK,GAAG,CAAC,GAAG,AAAC,UAAU,cAAe;YAEvE,OAAO;gBACL;gBACA;gBACA;gBACA;gBACA;YACF;QACF;QAEA,oCAAoC;QACpC,MAAM,QAAQ,YAAY;YACxB,YAAY;QACd,GAAG;QAEH,sBAAsB;QACtB,YAAY;QAEZ,qBAAqB;QACrB,OAAO,IAAM,cAAc;IAC7B,GAAG;QAAC;KAAQ;IAEZ,qBACE,8OAAC;QAAI,WAAW,CAAC,OAAO,EAAE,WAAW;;0BACnC,8OAAC;gBAAI,WAAU;;kCACb,8OAAC;wBAAI,WAAU;;0CACb,8OAAC;gCAAI,WAAU;0CAAsB,SAAS,IAAI;;;;;;0CAClD,8OAAC;gCAAI,WAAU;0CAAgC;;;;;;;;;;;;kCAEjD,8OAAC;wBAAI,WAAU;;0CACb,8OAAC;gCAAI,WAAU;0CAAsB,SAAS,KAAK;;;;;;0CACnD,8OAAC;gCAAI,WAAU;0CAAgC;;;;;;;;;;;;kCAEjD,8OAAC;wBAAI,WAAU;;0CACb,8OAAC;gCAAI,WAAU;0CAAsB,SAAS,OAAO;;;;;;0CACrD,8OAAC;gCAAI,WAAU;0CAAgC;;;;;;;;;;;;kCAEjD,8OAAC;wBAAI,WAAU;;0CACb,8OAAC;gCAAI,WAAU;0CAAsB,SAAS,OAAO;;;;;;0CACrD,8OAAC;gCAAI,WAAU;0CAAgC;;;;;;;;;;;;;;;;;;0BAGnD,8OAAC;gBAAS,OAAO,SAAS,UAAU;gBAAE,WAAU;;;;;;;;;;;;AAGtD","debugId":null}},
    {"offset": {"line": 2427, "column": 0}, "map": {"version":3,"sources":["file:///mnt/windows_d/manov/code/polytix-v1/app/campaigns/%5Bid%5D/overview-tab.jsx"],"sourcesContent":["import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport { formatAddress, formatDate, resolveIpfsUrl } from \"@/lib/utils\"\nimport { CalendarClock, Clock, Users } from \"lucide-react\"\nimport Image from \"next/image\"\nimport { useContract } from \"@/context/contract-context\"\nimport { useState, useEffect } from \"react\"\n\nexport default function OverviewTab({\n  campaignInfo,\n  proposals,\n  candidates: initialCandidates,\n  isOwner,\n  isCandidate,\n  isBeforeStart,\n  isDuringVoting,\n  isAfterEnd,\n}) {\n  const { contract } = useContract();\n  const [candidates, setCandidates] = useState(initialCandidates);\n  const [loading, setLoading] = useState(true);\n\n  // Loading state for candidates\n  const candidatesLoading = campaignInfo?.votingType === 0 && loading;\n\n  useEffect(() => {\n    async function fetchCandidateData() {\n      if (!contract || campaignInfo?.votingType !== 0) {\n        setLoading(false);\n        return;\n      }\n\n      try {\n        setLoading(true);\n        console.log(\"Fetching candidate data for campaign:\", campaignInfo.id);\n        \n        // Get the total number of candidates\n        \n        const candidateCount = await contract.getCandidateIds(campaignInfo.id);\n        console.log(`Found ${candidateCount} candidates`);\n        \n        const fetchedCandidates = [];\n        \n        // Fetch each candidate's details\n        for (let i = 0; i < candidateCount; i++) {\n          try {\n            // Get candidate data from contract\n            const candidateInfo = await contract.getCandidateInfo(campaignInfo.id, i);\n            console.log(`Candidate ${i} data:`, candidateInfo);\n            \n            // Extract candidate data\n            const candidateAddress = candidateInfo[0];\n            const candidateName = candidateInfo[1];\n            const candidateStatement = candidateInfo[2];\n            const candidateImageHash = candidateInfo[3] || \"no-image\";\n            console.log(resolveIpfsUrl(candidateImageHash));\n            \n            \n            // Get vote count for this candidate\n            const voteCount = candidateInfo[4];\n            \n            fetchedCandidates.push({\n              id: i,\n              address: candidateAddress,\n              name: candidateName,\n              statement: candidateStatement,\n              imageHash: candidateImageHash,\n              voteCount: Number(voteCount)\n            });\n            // console.log(resolveIpfsUrl(imageHash))\n          } catch (candidateErr) {\n            console.error(`Error fetching candidate ${i}:`, candidateErr);\n          }\n        }\n        \n        setCandidates(fetchedCandidates);\n      } catch (err) {\n        console.error(\"Error fetching candidates:\", err);\n      } finally {\n        setLoading(false);\n      }\n    }\n\n    fetchCandidateData();\n  }, [contract, campaignInfo]);\n\n  return (\n    <div className=\"space-y-6\">\n      <Card>\n        <CardHeader>\n          <CardTitle>Campaign Details</CardTitle>\n          <CardDescription>Overview of this campaign</CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div>\n              <h3 className=\"text-sm font-medium mb-1\">Campaign Type</h3>\n              <p className=\"text-sm text-muted-foreground\">\n                {campaignInfo.votingType === 0 ? \"Candidate-Based Election\" : \"Proposal-Based Voting\"}\n              </p>\n            </div>\n            <div>\n              <h3 className=\"text-sm font-medium mb-1\">Participation</h3>\n              <p className=\"text-sm text-muted-foreground\">\n                {campaignInfo.restriction === 0\n                  ? \"Open to All\"\n                  : campaignInfo.restriction === 1\n                    ? \"Limited (Token Gated)\"\n                    : \"Registration Required\"}\n              </p>\n            </div>\n            <div>\n              <h3 className=\"text-sm font-medium mb-1\">Start Date</h3>\n              <p className=\"text-sm text-muted-foreground\">{formatDate(campaignInfo.startTime)}</p>\n            </div>\n            <div>\n              <h3 className=\"text-sm font-medium mb-1\">End Date</h3>\n              <p className=\"text-sm text-muted-foreground\">{formatDate(campaignInfo.endTime)}</p>\n            </div>\n            <div>\n              <h3 className=\"text-sm font-medium mb-1\">Creator</h3>\n              <p className=\"text-sm text-muted-foreground\">{formatAddress(campaignInfo.creator)}</p>\n            </div>\n            <div>\n              <h3 className=\"text-sm font-medium mb-1\">Status</h3>\n              <div>\n                <Badge\n                  variant={isDuringVoting ? \"default\" : isAfterEnd ? \"secondary\" : \"outline\"}\n                  className={\n                    isDuringVoting\n                      ? \"bg-green-600 hover:bg-green-700\"\n                      : isAfterEnd\n                        ? \"\"\n                        : \"text-blue-600 border-blue-300\"\n                  }\n                >\n                  {isBeforeStart ? \"Upcoming\" : isDuringVoting ? \"Active\" : \"Ended\"}\n                </Badge>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {campaignInfo.votingType === 0 ? (\n        <Card>\n          <CardHeader>\n            <CardTitle>Candidates</CardTitle>\n            <CardDescription>\n              {candidatesLoading\n                ? \"Loading candidate details from blockchain...\"\n                : `${candidates.length} candidates in this election`}\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              {candidatesLoading ? (\n                // Show skeletons while loading\n                Array(3).fill(0).map((_, idx) => (\n                  <Card key={`skeleton-${idx}`} className=\"overflow-hidden\">\n                    <div className=\"p-4 flex gap-4\">\n                      <div className=\"w-16 h-16 rounded-md bg-muted flex-shrink-0\"></div>\n                      <div className=\"flex-1\">\n                        <Skeleton className=\"h-5 w-1/2 mb-2\" />\n                        <Skeleton className=\"h-3 w-1/3 mb-4\" />\n                        <Skeleton className=\"h-3 w-full mb-2\" />\n                        <Skeleton className=\"h-3 w-3/4\" />\n                      </div>\n                    </div>\n                  </Card>\n                ))\n              ) : candidates.length > 0 ? (\n                candidates.map((candidate) => (\n                  <Card key={candidate.id} className=\"overflow-hidden\">\n                    <div className=\"p-4 flex gap-4\">\n                      <div className=\"w-16 h-16 rounded-md bg-muted flex items-center justify-center flex-shrink-0\">\n                        {candidate.imageHash &&\n                        candidate.imageHash !== \"loading\" &&\n                        candidate.imageHash !== \"no-image\" ? (\n                          <Image\n                            src={resolveIpfsUrl(candidate.imageHash)}\n                            width={64}\n                            height={64}\n                            alt={candidate.name}\n                            className=\"rounded-md object-cover\"\n                          />\n                        ) : (\n                          <Users className=\"h-8 w-8 text-muted-foreground\" />\n                        )}\n                      </div>\n                      <div className=\"flex-1\">\n                        <h3 className=\"font-medium\">{candidate.name}</h3>\n                        <p className=\"text-xs text-muted-foreground mb-2\">{formatAddress(candidate.address)}</p>\n                        <p className=\"text-sm text-muted-foreground line-clamp-3\">{candidate.statement}</p>\n                      </div>\n                    </div>\n                  </Card>\n                ))\n              ) : (\n                <div className=\"col-span-2 text-center p-8 text-muted-foreground\">\n                  No candidates found for this campaign\n                </div>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n      ) : (\n        <Card>\n          <CardHeader>\n            <CardTitle>Proposals</CardTitle>\n            <CardDescription>{proposals.length} proposals in this campaign</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {proposals.map((proposal) => (\n                <Card key={proposal.id} className=\"overflow-hidden\">\n                  <div className=\"p-4\">\n                    <h3 className=\"font-medium mb-1\">Proposal {proposal.id + 1}</h3>\n                    <p className=\"text-sm text-muted-foreground\">{proposal.content}</p>\n                  </div>\n                </Card>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Statistics</CardTitle>\n          <CardDescription>Current participation statistics</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 sm:grid-cols-3 gap-4\">\n            <div className=\"flex items-start gap-3\">\n              <Users className=\"h-5 w-5 text-primary flex-shrink-0 mt-1\" />\n              <div>\n                <h3 className=\"font-semibold text-base\">Participation</h3>\n                <div className=\"text-sm text-muted-foreground mt-1 space-y-0.5\">\n                  <div>Total Votes Cast: {campaignInfo.totalVotes}</div>\n                  {campaignInfo.restriction !== 0 && <div>Registered: {campaignInfo.registeredVoterCount}</div>}\n                  <div>\n                    {campaignInfo.votingType === 0 ? \"Candidates\" : \"Proposals\"}: {campaignInfo.itemCount}\n                  </div>\n                </div>\n              </div>\n            </div>\n            <div className=\"flex items-start gap-3\">\n              <CalendarClock className=\"h-5 w-5 text-primary flex-shrink-0 mt-1\" />\n              <div>\n                <h3 className=\"font-semibold text-base\">Timeline</h3>\n                <div className=\"text-sm text-muted-foreground mt-1 space-y-0.5\">\n                  <div>Start: {formatDate(campaignInfo.startTime)}</div>\n                  <div>End: {formatDate(campaignInfo.endTime)}</div>\n                </div>\n              </div>\n            </div>\n            <div className=\"flex items-start gap-3\">\n              <Clock className=\"h-5 w-5 text-primary flex-shrink-0 mt-1\" />\n              <div>\n                <h3 className=\"font-semibold text-base\">Status</h3>\n                <div className=\"text-sm text-muted-foreground mt-1 space-y-0.5\">\n                  <div>Campaign: {isBeforeStart ? \"Upcoming\" : isDuringVoting ? \"Active\" : \"Ended\"}</div>\n                  {isCandidate && (\n                    <div>\n                      Your Role: <span className=\"text-purple-600\">Candidate</span>\n                    </div>\n                  )}\n                  {isOwner && (\n                    <div>\n                      Your Role: <span className=\"text-blue-600\">Creator</span>\n                    </div>\n                  )}\n                </div>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  )\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 3267, "column": 0}, "map": {"version":3,"sources":["file:///mnt/windows_d/manov/code/polytix-v1/app/campaigns/%5Bid%5D/vote-tab.jsx"],"sourcesContent":["\"use client\"\n\nimport { useState, useEffect } from \"react\"\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle, CardFooter } from \"@/components/ui/card\"\nimport { Button } from \"@/components/ui/button\"\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\"\nimport { Label } from \"@/components/ui/label\"\nimport { Alert, AlertDescription, AlertTitle } from \"@/components/ui/alert\"\nimport { AlertCircle, CheckCircle, Vote, AlertTriangle, Users } from \"lucide-react\"\nimport { formatAddress, resolveIpfsUrl } from \"@/lib/utils\"\nimport { toast } from \"sonner\"\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from \"@/components/ui/dialog\"\nimport Image from \"next/image\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\n\nexport default function VoteTab({\n  campaignInfo,\n  proposals,\n  candidates: initialCandidates,\n  contract,\n  campaignId,\n  isConnected,\n  connectWallet,\n  onVoteSuccess,\n}) {\n  const [selectedOption, setSelectedOption] = useState(null)\n  const [isSubmitting, setIsSubmitting] = useState(false)\n  const [error, setError] = useState(null)\n  const [success, setSuccess] = useState(null)\n  const [showErrorDialog, setShowErrorDialog] = useState(false)\n  const [candidates, setCandidates] = useState(initialCandidates)\n  const [loading, setLoading] = useState(true)\n\n  // Loading state for candidates\n  const candidatesLoading = campaignInfo?.votingType === 0 && loading\n\n  useEffect(() => {\n    async function fetchCandidateData() {\n      if (!contract || campaignInfo?.votingType !== 0) {\n        setLoading(false)\n        return\n      }\n\n      try {\n        setLoading(true)\n        console.log(\"Fetching candidate data for campaign:\", campaignInfo.id)\n        \n        // Get the total number of candidates\n        const candidateCount = await contract.getCandidateIds(campaignInfo.id)\n        console.log(`Found ${candidateCount} candidates`)\n        \n        const fetchedCandidates = []\n        \n        // Fetch each candidate's details\n        for (let i = 0; i < candidateCount; i++) {\n          try {\n            // Get candidate data from contract\n            const candidateInfo = await contract.getCandidateInfo(campaignInfo.id, i)\n            console.log(`Candidate ${i} data:`, candidateInfo)\n            \n            // Extract candidate data\n            const candidateAddress = candidateInfo[0]\n            const candidateName = candidateInfo[1]\n            const candidateStatement = candidateInfo[2]\n            const candidateImageHash = candidateInfo[3] || \"no-image\"\n            \n            // Get vote count for this candidate\n            const voteCount = candidateInfo[4]\n            \n            fetchedCandidates.push({\n              id: i,\n              address: candidateAddress,\n              name: candidateName,\n              statement: candidateStatement,\n              imageHash: candidateImageHash,\n              voteCount: Number(voteCount)\n            })\n          } catch (candidateErr) {\n            console.error(`Error fetching candidate ${i}:`, candidateErr)\n          }\n        }\n        \n        setCandidates(fetchedCandidates)\n      } catch (err) {\n        console.error(\"Error fetching candidates:\", err)\n      } finally {\n        setLoading(false)\n      }\n    }\n\n    fetchCandidateData()\n  }, [contract, campaignInfo])\n\n  const handleVote = async () => {\n    if (!isConnected) {\n      await connectWallet()\n      return\n    }\n\n    if (selectedOption === null) {\n      toast.error(\"Please select an option to vote for\")\n      setError(\"Please select an option to vote for\")\n      return\n    }\n\n    try {\n      setIsSubmitting(true)\n      setError(null)\n      setSuccess(null)\n\n      toast.loading(\"Casting your vote...\", {\n        id: \"vote-transaction\",\n      })\n\n      // Call contract to vote\n      let tx\n      if (campaignInfo.votingType === 0) {\n        // Candidate-based\n        tx = await contract.voteForCandidate(campaignId, selectedOption)\n      } else {\n        // Proposal-based\n        tx = await contract.voteForProposal(campaignId, selectedOption)\n      }\n\n      await tx.wait()\n\n      toast.success(\"Your vote has been cast successfully!\", {\n        id: \"vote-transaction\",\n        duration: 5000,\n      })\n\n      setSuccess(\"Your vote has been cast successfully!\")\n\n      // Notify parent component\n      if (onVoteSuccess) {\n        setTimeout(() => {\n          onVoteSuccess()\n        }, 2000)\n      }\n    } catch (err) {\n      console.error(\"Error voting:\", err)\n\n      toast.error(\"Failed to cast your vote\", {\n        id: \"vote-transaction\",\n        duration: 5000,\n      })\n\n      setError(\"Failed to cast your vote. Please try again.\")\n      setShowErrorDialog(true)\n    } finally {\n      setIsSubmitting(false)\n    }\n  }\n\n  if (!isConnected) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Vote className=\"h-5 w-5 text-primary\" />\n            Connect Wallet to Vote\n          </CardTitle>\n          <CardDescription>You need to connect your wallet to vote in this campaign</CardDescription>\n        </CardHeader>\n        <CardContent className=\"text-center py-8\">\n          <Vote className=\"h-16 w-16 mx-auto text-muted-foreground/50 mb-4\" />\n          <p className=\"text-muted-foreground mb-6\">Connect your wallet to cast your vote in this campaign</p>\n          <Button onClick={connectWallet}>Connect Wallet</Button>\n        </CardContent>\n      </Card>\n    )\n  }\n\n  return (\n    <>\n      <Card className=\"border-2 border-primary/10 shadow-lg\">\n        <CardHeader className=\"bg-primary/5\">\n          <CardTitle className=\"flex items-center gap-2\">\n            <Vote className=\"h-5 w-5 text-primary\" />\n            Cast Your Vote\n          </CardTitle>\n          <CardDescription>\n            {campaignInfo.votingType === 1 ? \"Select a proposal to vote for\" : \"Select a candidate to vote for\"}\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"pt-6\">\n          {error && (\n            <Alert variant=\"destructive\" className=\"mb-4\">\n              <AlertCircle className=\"h-4 w-4\" />\n              <AlertTitle>Error</AlertTitle>\n              <AlertDescription>{error}</AlertDescription>\n            </Alert>\n          )}\n\n          {success && (\n            <Alert className=\"bg-green-50 text-green-800 border-green-200 mb-4\">\n              <CheckCircle className=\"h-4 w-4 text-green-500\" />\n              <AlertTitle>Success</AlertTitle>\n              <AlertDescription>{success}</AlertDescription>\n            </Alert>\n          )}\n\n          <div className=\"bg-muted/20 p-4 rounded-lg mb-6\">\n            <h3 className=\"text-sm font-medium mb-2 flex items-center\">\n              <AlertCircle className=\"h-4 w-4 mr-2 text-amber-500\" />\n              Important Information\n            </h3>\n            <ul className=\"text-sm text-muted-foreground space-y-1 list-disc pl-5\">\n              <li>Your vote is final and cannot be changed once submitted</li>\n              <li>Voting requires a blockchain transaction that may take a few moments to complete</li>\n              <li>Make sure you have enough gas in your wallet to complete the transaction</li>\n            </ul>\n          </div>\n\n          <RadioGroup\n            value={selectedOption !== null ? selectedOption.toString() : undefined}\n            onValueChange={(value) => setSelectedOption(Number.parseInt(value))}\n            className=\"space-y-4\"\n          >\n            {campaignInfo.votingType === 1\n              ? proposals.map((proposal) => (\n                  <div\n                    key={proposal.id}\n                    className=\"flex items-start space-x-2 border rounded-md p-4 hover:bg-muted/50 transition-colors\"\n                  >\n                    <RadioGroupItem value={proposal.id.toString()} id={`proposal-${proposal.id}`} className=\"mt-1\" />\n                    <div className=\"flex-1\">\n                      <Label htmlFor={`proposal-${proposal.id}`} className=\"font-medium cursor-pointer\">\n                        Proposal {proposal.id + 1}\n                      </Label>\n                      <p className=\"text-sm text-muted-foreground mt-1\">{proposal.content}</p>\n                    </div>\n                  </div>\n                ))\n              : candidatesLoading ? (\n                  // Show skeletons while loading\n                  Array(3).fill(0).map((_, idx) => (\n                    <div\n                      key={`skeleton-${idx}`}\n                      className=\"flex items-start space-x-2 border rounded-md p-4\"\n                    >\n                      <Skeleton className=\"h-4 w-4 mt-1 rounded-full\" />\n                      <div className=\"flex-1\">\n                        <div className=\"flex gap-4\">\n                          <Skeleton className=\"w-12 h-12 rounded-md flex-shrink-0\" />\n                          <div className=\"flex-1\">\n                            <Skeleton className=\"h-5 w-1/3 mb-1\" />\n                            <Skeleton className=\"h-3 w-1/4 mb-2\" />\n                            <Skeleton className=\"h-3 w-full\" />\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  ))\n                )\n                : candidates.map((candidate) => (\n                  <div\n                    key={candidate.id}\n                    className=\"flex items-start space-x-2 border rounded-md p-4 hover:bg-muted/50 transition-colors\"\n                  >\n                    <RadioGroupItem value={candidate.id.toString()} id={`candidate-${candidate.id}`} className=\"mt-1\" />\n                    <div className=\"flex-1\">\n                      <div className=\"flex gap-4\">\n                        <div className=\"w-12 h-12 rounded-md bg-muted flex items-center justify-center flex-shrink-0\">\n                          {candidate.imageHash &&\n                          candidate.imageHash !== \"loading\" &&\n                          candidate.imageHash !== \"no-image\" ? (\n                            <Image\n                              src={resolveIpfsUrl(candidate.imageHash)}\n                              width={48}\n                              height={48}\n                              alt={candidate.name}\n                              className=\"rounded-md object-cover\"\n                            />\n                          ) : (\n                            <Users className=\"h-6 w-6 text-muted-foreground\" />\n                          )}\n                        </div>\n                        <div className=\"flex-1\">\n                          <Label htmlFor={`candidate-${candidate.id}`} className=\"font-medium cursor-pointer\">\n                            {candidate.name}\n                          </Label>\n                          <p className=\"text-xs text-muted-foreground\">{formatAddress(candidate.address)}</p>\n                          <p className=\"text-sm text-muted-foreground mt-1\">{candidate.statement}</p>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n          </RadioGroup>\n        </CardContent>\n        <CardFooter className=\"bg-muted/10 border-t px-6 py-4\">\n          <Button \n            className=\"w-full\" \n            onClick={handleVote} \n            disabled={selectedOption === null || isSubmitting || candidatesLoading} \n            size=\"lg\"\n          >\n            {isSubmitting ? \"Casting Vote...\" : candidatesLoading ? \"Loading Candidates...\" : \"Cast Vote\"}\n          </Button>\n        </CardFooter>\n      </Card>\n\n      <Dialog open={showErrorDialog} onOpenChange={setShowErrorDialog}>\n        <DialogContent className=\"sm:max-w-md\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center gap-2\">\n              <AlertTriangle className=\"h-5 w-5 text-amber-500\" />\n              Transaction Failed\n            </DialogTitle>\n            <DialogDescription>There was an issue with your voting transaction</DialogDescription>\n          </DialogHeader>\n          <div className=\"p-4 bg-amber-50 dark:bg-amber-950/20 rounded-lg\">\n            <p className=\"text-sm text-amber-800 dark:text-amber-300\">\n              PolyTix was just migrated from Polygon ZkEVM Cardona Testnet to Polygon Amoy Testnet, which is facing some\n              issues while confirming transactions. Please try:\n            </p>\n            <ul className=\"list-disc pl-5 mt-2 text-sm text-amber-700 dark:text-amber-400 space-y-1\">\n              <li>Increasing gas fees in your wallet</li>\n              <li>Waiting a few minutes and trying again</li>\n              <li>Checking your wallet connection</li>\n            </ul>\n          </div>\n          <div className=\"flex justify-end gap-3 mt-4\">\n            <Button variant=\"outline\" onClick={() => setShowErrorDialog(false)}>\n              Cancel\n            </Button>\n            <Button\n              onClick={() => {\n                setShowErrorDialog(false)\n                handleVote()\n              }}\n            >\n              Try Again\n            </Button>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </>\n  )\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 4055, "column": 0}, "map": {"version":3,"sources":["file:///mnt/windows_d/manov/code/polytix-v1/app/campaigns/%5Bid%5D/page.jsx"],"sourcesContent":["\"use client\"\n\nimport { useState, useEffect } from \"react\"\nimport { useParams, useRouter } from \"next/navigation\"\nimport Link from \"next/link\"\nimport { useContract } from \"@/context/contract-context\"\nimport { useSubgraph } from \"@/context/graphql/queries\"\nimport { Tabs, TabsList, TabsTrigger, TabsContent } from \"@/components/ui/tabs\"\nimport { Card, CardContent } from \"@/components/ui/card\"\nimport { Button } from \"@/components/ui/button\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport { Alert, AlertDescription } from \"@/components/ui/alert\"\nimport { ArrowLeft, CalendarClock, Clock, Users, AlertCircle, RefreshCw, Award } from \"lucide-react\"\nimport { formatDate, formatAddress } from \"@/lib/utils\"\nimport RegisterTab from \"./register-tab\"\nimport ResultsTab from \"./results-tab\"\nimport CampaignCountdown from \"./countdown-timer\"\nimport { ApolloClient, InMemoryCache, gql } from \"@apollo/client\"\nimport OverviewTab from \"./overview-tab\"\nimport VoteTab from \"./vote-tab\"\nimport { useVoterStatus } from \"@/hooks/use-voter-status\"\n\n// GraphQL client setup\nconst client = new ApolloClient({\n  uri: \"https://api.studio.thegraph.com/query/101223/polytix/version/latest\",\n  cache: new InMemoryCache(),\n})\n\n// GraphQL query for campaign details\nconst CAMPAIGN_DETAILS_QUERY = gql`\n  query CampaignDetails($id: String!) {\n    campaignCreateds(where: {campaignId: $id}, first: 1) {\n      creator\n      votingType\n      restriction\n      startTime\n      endTime\n      blockTimestamp\n    }\n    campaignStatusChangeds(where: {campaignId: $id}, orderBy: blockTimestamp, orderDirection: desc, first: 1) {\n      status\n    }\n    voteCasts(where: {campaignId: $id}) {\n      voter\n      targetId\n    }\n    voterRegistereds(where: {campaignId: $id}) {\n      voter\n      tokenId\n    }\n    candidateAddeds(where: {campaignId: $id}, orderBy: candidateId, orderDirection: asc) {\n      candidateId\n      candidateAddress\n      name\n    }\n    candidateRegistereds(where: {campaignId: $id}) {\n      candidate\n      tokenId\n    }\n    proposalAddeds(where: {campaignId: $id}, orderBy: proposalId, orderDirection: asc) {\n      proposalId\n      content\n    }\n  }\n`\n\nexport default function CampaignDetailsPage() {\n  const params = useParams()\n  const router = useRouter()\n  const campaignId = params.id\n  const { contract, address, isConnected, connectWallet } = useContract()\n  const { refetchEvents } = useSubgraph()\n\n  // State variables\n  const [loading, setLoading] = useState(true)\n  const [error, setError] = useState(null)\n  const [campaignInfo, setCampaignInfo] = useState(null)\n  const [proposals, setProposals] = useState([])\n  const [candidates, setCandidates] = useState([])\n  // Replace these lines:\n  // const [userRegistered, setUserRegistered] = useState(false)\n  // const [userVoted, setUserVoted] = useState(false)\n  // const [isCandidate, setIsCandidate] = useState(false)\n\n  // With this hook:\n  const {\n    isLoading: voterStatusLoading,\n    isRegisteredVoter: userRegistered,\n    isRegisteredCandidate: isCandidate,\n    hasVoted: userVoted,\n    error: voterStatusError,\n  } = useVoterStatus(campaignId)\n  const [isOwner, setIsOwner] = useState(false)\n  const [activeTab, setActiveTab] = useState(\"overview\")\n\n  console.log(candidates)\n\n  // Time-based states\n  const [isBeforeStart, setIsBeforeStart] = useState(false)\n  const [isDuringVoting, setIsDuringVoting] = useState(false)\n  const [isAfterEnd, setIsAfterEnd] = useState(false)\n\n  // Helper function to fetch candidate data directly from contract\n  const fetchCandidateDataFromContract = async (campaignId, candidateList) => {\n    if (!contract) {\n      console.warn(\"Contract instance not available for fetching candidate data\")\n      return candidateList\n    }\n\n    try {\n      const updatedCandidates = [...candidateList]\n      console.log(`Fetching detailed data for ${updatedCandidates.length} candidates from blockchain`)\n\n      for (let i = 0; i < updatedCandidates.length; i++) {\n        try {\n          console.log(`Fetching data for candidate ${updatedCandidates[i].id} from contract`)\n          const candidateInfo = await contract.getCandidateInfo(campaignId, updatedCandidates[i].id)\n\n          // Update with contract data\n          updatedCandidates[i].statement = candidateInfo[2] || \"No statement provided\"\n          updatedCandidates[i].imageHash = candidateInfo[3] || \"no-image\"\n          console.log(`Successfully fetched data for candidate ${updatedCandidates[i].id}`)\n        } catch (candidateErr) {\n          console.error(`Error fetching details for candidate ${updatedCandidates[i].id}:`, candidateErr)\n          // Keep existing data, just log the error\n        }\n      }\n\n      console.log(\"Completed fetching all candidate details from blockchain\")\n      return updatedCandidates\n    } catch (err) {\n      console.error(\"Failed to fetch candidate data from contract:\", err)\n      return candidateList // Return original list on failure\n    }\n  }\n\n  // Fetch campaign data using GraphQL and contract calls\n  const fetchCampaignData = async () => {\n    if (!campaignId) {\n      setError(\"Campaign ID is missing.\")\n      setLoading(false)\n      return\n    }\n\n    try {\n      setLoading(true)\n      setError(null)\n\n      // Step 1: Fetch campaign data using GraphQL (Subgraph)\n      console.log(\"Fetching campaign data from Subgraph...\")\n      const { data, error: queryError } = await client.query({\n        query: CAMPAIGN_DETAILS_QUERY,\n        variables: { id: String(campaignId) },\n        fetchPolicy: \"network-only\",\n      })\n\n      if (queryError) throw queryError\n\n      if (!data || !data.campaignCreateds || data.campaignCreateds.length === 0) {\n        setError(\"Campaign not found in subgraph.\")\n        setLoading(false)\n        return\n      }\n\n      // Process Subgraph data\n      const campaignCreatedEvent = data.campaignCreateds[0]\n      const voteCasts = data.voteCasts || []\n      const voterRegistrations = data.voterRegistereds || []\n      const candidateData = data.candidateAddeds || []\n      const candidateRegistrations = data.candidateRegistereds || []\n      const proposalData = data.proposalAddeds || []\n      const statusChanges = data.campaignStatusChangeds || []\n\n      // Time Calculations\n      const now = Math.floor(Date.now() / 1000)\n      const startTime = Number(campaignCreatedEvent.startTime)\n      const endTime = Number(campaignCreatedEvent.endTime)\n      const beforeStart = now < startTime\n      const duringVoting = now >= startTime && now < endTime\n      const afterEnd = now >= endTime\n      setIsBeforeStart(beforeStart)\n      setIsDuringVoting(duringVoting)\n      setIsAfterEnd(afterEnd)\n\n      // Process campaign metadata from Subgraph\n      const campaignDescription = `Campaign #${campaignId}`\n      const campaignResultType = 0\n\n      // Process proposals or candidates based on voting type\n      let processedProposals = []\n      let processedCandidates = []\n\n      if (Number(campaignCreatedEvent.votingType) === 1) {\n        // Proposal-based - use Subgraph data\n        processedProposals = proposalData.map((proposal) => {\n          const voteCount = voteCasts.filter((vote) => String(vote.targetId) === String(proposal.proposalId)).length\n          return {\n            id: Number(proposal.proposalId),\n            content: proposal.content,\n            voteCount: voteCount,\n          }\n        })\n        setProposals(processedProposals)\n      } else {\n        // Candidate-based - use Subgraph for basic data, will enhance with blockchain data later\n        processedCandidates = candidateData.map((candidate) => {\n          const voteCount = voteCasts.filter((vote) => String(vote.targetId) === String(candidate.candidateId)).length\n          return {\n            id: Number(candidate.candidateId),\n            name: candidate.name,\n            address: candidate.candidateAddress,\n            statement: \"Loading statement from blockchain...\",\n            imageHash: \"loading\",\n            voteCount: voteCount,\n          }\n        })\n      }\n\n      // Combine Base Campaign Info from Subgraph\n      const baseCampaignData = {\n        id: campaignId,\n        votingType: Number(campaignCreatedEvent.votingType),\n        restriction: Number(campaignCreatedEvent.restriction),\n        resultType: campaignResultType,\n        creator: campaignCreatedEvent.creator,\n        description: campaignDescription,\n        startTime: startTime * 1000,\n        endTime: endTime * 1000,\n        status: statusChanges.length > 0 ? Number(statusChanges[0].status) : afterEnd ? 2 : duringVoting ? 1 : 0,\n        totalVotes: voteCasts.length,\n        itemCount: Number(campaignCreatedEvent.votingType) === 1 ? proposalData.length : candidateData.length,\n        registeredVoterCount: voterRegistrations.length,\n      }\n\n      // User Status Checks - only check for owner, the rest comes from the hook\n      const isCampaignOwner =\n        isConnected && address && campaignCreatedEvent.creator.toLowerCase() === address.toLowerCase()\n      setIsOwner(isCampaignOwner)\n\n      // Set campaign info first to avoid loading delays\n      setCampaignInfo(baseCampaignData)\n\n      // Step 2: For candidate-based campaigns, fetch additional data from blockchain\n      if (baseCampaignData.votingType === 0) {\n        // Set initial candidate data from Subgraph\n        setCandidates(processedCandidates)\n        console.log(\"Initial candidate data set from Subgraph, fetching details from blockchain...\")\n\n        // Then fetch additional data from contract and update\n        if (contract) {\n          try {\n            // Get campaign description and result type from contract\n            console.log(\"Fetching campaign basic info from blockchain...\")\n            const basicInfo = await contract.getCampaignBasicInfo(campaignId)\n            const updatedCampaignInfo = { ...baseCampaignData }\n            updatedCampaignInfo.description = basicInfo[4] || baseCampaignInfo.description\n            updatedCampaignInfo.resultType =\n              basicInfo[2] !== undefined ? Number(basicInfo[2]) : baseCampaignInfo.resultType\n            setCampaignInfo(updatedCampaignInfo)\n\n            // Fetch detailed candidate data from contract (async)\n            console.log(\"Fetching detailed candidate data from blockchain...\")\n            const enhancedCandidates = await fetchCandidateDataFromContract(campaignId, processedCandidates)\n            setCandidates(enhancedCandidates)\n            console.log(\"Candidate data successfully enhanced with blockchain data\")\n          } catch (err) {\n            console.error(\"Error fetching additional contract data:\", err)\n            // We still have the basic data from Subgraph, so we can continue\n          }\n        } else {\n          console.warn(\"Contract instance not available, using Subgraph data only for candidates\")\n        }\n      } else {\n        // For proposal-based campaigns, just set the proposals from Subgraph\n        setProposals(processedProposals)\n      }\n\n      // Set initial active tab based on campaign status and user state\n      if (afterEnd) {\n        setActiveTab(\"results\")\n      } else if (duringVoting && userRegistered && !userVoted) {\n        setActiveTab(\"vote\")\n      } else if (beforeStart && baseCampaignData.restriction === 2 && !userRegistered && !isCandidate) {\n        setActiveTab(\"register\")\n      } else {\n        setActiveTab(\"overview\")\n      }\n    } catch (err) {\n      console.error(\"Error fetching campaign details:\", err)\n      if (err.networkError) {\n        setError(\"Network error: Could not reach the subgraph.\")\n      } else if (err.graphQLErrors) {\n        setError(`GraphQL error: ${err.graphQLErrors.map((e) => e.message).join(\", \")}`)\n      } else {\n        setError(\"Failed to load campaign details. Please check the console and try again.\")\n      }\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  // Fetch data on mount and when dependencies change\n  useEffect(() => {\n    if (campaignId) {\n      fetchCampaignData()\n    }\n  }, [campaignId, contract, address, isConnected])\n\n  // Add a separate effect to monitor contract changes\n  useEffect(() => {\n    if (\n      contract &&\n      campaignInfo?.votingType === 0 &&\n      candidates.length > 0 &&\n      candidates.some((c) => c.statement === \"Loading statement from blockchain...\")\n    ) {\n      console.log(\"Contract available, refreshing candidate data from blockchain\")\n      const updateCandidateData = async () => {\n        try {\n          const enhancedCandidates = await fetchCandidateDataFromContract(campaignId, candidates)\n          setCandidates(enhancedCandidates)\n        } catch (err) {\n          console.error(\"Failed to update candidate data:\", err)\n        }\n      }\n      updateCandidateData()\n    }\n  }, [contract, campaignInfo?.votingType])\n\n  // Handle registration success\n  const handleRegistrationSuccess = async () => {\n    // Optimistically update count\n    setCampaignInfo((prev) => ({\n      ...prev,\n      registeredVoterCount: (prev?.registeredVoterCount ?? 0) + 1,\n    }))\n\n    // Trigger subgraph refresh\n    if (refetchEvents) refetchEvents()\n\n    // Fully refetch data after a delay\n    setTimeout(fetchCampaignData, 2000)\n\n    setActiveTab(\"overview\")\n  }\n\n  // Handle vote success\n  const handleVoteSuccess = async (votedItemId) => {\n    // Optimistically update counts\n    setCampaignInfo((prev) => ({\n      ...prev,\n      totalVotes: (prev?.totalVotes ?? 0) + 1,\n    }))\n\n    // Optimistically update item vote count\n    if (campaignInfo?.votingType === 1) {\n      // Proposal\n      setProposals((prevProposals) =>\n        prevProposals.map((p) => (String(p.id) === String(votedItemId) ? { ...p, voteCount: p.voteCount + 1 } : p)),\n      )\n    } else {\n      // Candidate\n      setCandidates((prevCandidates) =>\n        prevCandidates.map((c) => (String(c.id) === String(votedItemId) ? { ...c, voteCount: c.voteCount + 1 } : c)),\n      )\n    }\n\n    // Trigger subgraph refresh\n    if (refetchEvents) refetchEvents()\n\n    // Fully refetch data after a delay\n    setTimeout(fetchCampaignData, 2000)\n\n    setActiveTab(\"results\")\n  }\n\n  // Get status message based on campaign state and user status\n  const getStatusMessage = () => {\n    // Add this condition at the beginning of the getStatusMessage function\n    if (voterStatusLoading && isConnected) {\n      return (\n        <Alert className={`border bg-blue-50 dark:bg-blue-950/20 border-blue-200 dark:border-blue-900/50`}>\n          <AlertDescription className=\"flex items-center\">\n            <RefreshCw className=\"h-4 w-4 mr-2 animate-spin\" />\n            Checking your registration status...\n          </AlertDescription>\n        </Alert>\n      )\n    }\n\n    if (!campaignInfo) return null\n\n    const alertBaseClasses = \"border\"\n    const alertTextClasses = \"flex items-center\"\n\n    if (isAfterEnd) {\n      return (\n        <Alert\n          className={`${alertBaseClasses} bg-purple-50 dark:bg-purple-950/20 border-purple-200 dark:border-purple-900/50`}\n        >\n          <AlertDescription className={alertTextClasses}>\n            📊 This campaign has ended. Final results are available below.\n          </AlertDescription>\n        </Alert>\n      )\n    }\n\n    if (isBeforeStart) {\n      if (isCandidate) {\n        return (\n          <Alert\n            className={`${alertBaseClasses} bg-green-50 dark:bg-green-950/20 border-green-200 dark:border-green-900/50`}\n          >\n            <AlertDescription className={alertTextClasses}>\n              🎭 You are registered as a candidate for this campaign. Good luck!\n            </AlertDescription>\n          </Alert>\n        )\n      }\n\n      if (campaignInfo.restriction === 0) {\n        // Open\n        return (\n          <Alert\n            className={`${alertBaseClasses} bg-blue-50 dark:bg-blue-950/20 border-blue-200 dark:border-blue-900/50`}\n          >\n            <AlertDescription className={alertTextClasses}>\n              🗳️ This campaign is open to all. Voting starts soon!\n            </AlertDescription>\n          </Alert>\n        )\n      } else if (!isConnected) {\n        // Registration required, but wallet not connected\n        return (\n          <Alert\n            className={`${alertBaseClasses} bg-amber-50 dark:bg-amber-950/20 border-amber-200 dark:border-amber-900/50`}\n          >\n            <AlertDescription className={alertTextClasses}>\n              🔐 This campaign requires registration.{\" \"}\n              <Button variant=\"link\" className=\"p-0 h-auto ml-1\" onClick={connectWallet}>\n                Connect wallet\n              </Button>{\" \"}\n              to check status or register.\n            </AlertDescription>\n          </Alert>\n        )\n      } else if (campaignInfo.restriction === 2 && !userRegistered) {\n        // Registration required, not registered\n        return (\n          <Alert\n            className={`${alertBaseClasses} bg-amber-50 dark:bg-amber-950/20 border-amber-200 dark:border-amber-900/50`}\n          >\n            <AlertDescription className={alertTextClasses}>\n              🔐 This campaign requires registration. Go to the 'Register' tab to participate.\n            </AlertDescription>\n          </Alert>\n        )\n      } else {\n        // Registered (or Limited access assumed ok)\n        return (\n          <Alert\n            className={`${alertBaseClasses} bg-green-50 dark:bg-green-950/20 border-green-200 dark:border-green-900/50`}\n          >\n            <AlertDescription className={alertTextClasses}>\n              🎉 You are eligible for this campaign! Voting will start soon.\n            </AlertDescription>\n          </Alert>\n        )\n      }\n    }\n\n    if (isDuringVoting) {\n      if (isCandidate) {\n        return (\n          <Alert\n            className={`${alertBaseClasses} bg-green-50 dark:bg-green-950/20 border-green-200 dark:border-green-900/50`}\n          >\n            <AlertDescription className={alertTextClasses}>\n              🎭 You are a candidate in this campaign.{\" \"}\n              {userVoted ? \"You have already voted.\" : \"You can also vote for other candidates.\"}\n            </AlertDescription>\n          </Alert>\n        )\n      }\n\n      if (!isConnected) {\n        // Voting active, but wallet not connected\n        return (\n          <Alert\n            className={`${alertBaseClasses} bg-blue-50 dark:bg-blue-950/20 border-blue-200 dark:border-blue-900/50`}\n          >\n            <AlertDescription className={alertTextClasses}>\n              🗳️ Voting is active!{\" \"}\n              <Button variant=\"link\" className=\"p-0 h-auto ml-1\" onClick={connectWallet}>\n                Connect wallet\n              </Button>{\" \"}\n              to check eligibility and vote.\n            </AlertDescription>\n          </Alert>\n        )\n      } else if (userVoted) {\n        // Already voted\n        return (\n          <Alert\n            className={`${alertBaseClasses} bg-green-50 dark:bg-green-950/20 border-green-200 dark:border-green-900/50`}\n          >\n            <AlertDescription className={alertTextClasses}>\n              🙌 Thanks for voting! Your vote has been securely recorded.\n            </AlertDescription>\n          </Alert>\n        )\n      } else if (campaignInfo.restriction === 2 && !userRegistered) {\n        // Registration required, but not registered\n        return (\n          <Alert\n            className={`${alertBaseClasses} bg-amber-50 dark:bg-amber-950/20 border-amber-200 dark:border-amber-900/50`}\n          >\n            <AlertDescription className={alertTextClasses}>\n              🍿 Registration was required for this campaign, but you did not register. You can view live results.\n            </AlertDescription>\n          </Alert>\n        )\n      } else {\n        // Eligible to vote (Open, or Registered)\n        return (\n          <Alert\n            className={`${alertBaseClasses} bg-blue-50 dark:bg-blue-950/20 border-blue-200 dark:border-blue-900/50`}\n          >\n            <AlertDescription className={alertTextClasses}>\n              🗳️ Voting is now open! Go to the 'Vote' tab to cast your vote.\n            </AlertDescription>\n          </Alert>\n        )\n      }\n    }\n\n    return null\n  }\n\n  // Render Logic\n  if (loading) {\n    return (\n      <div className=\"container max-w-5xl mx-auto py-10 mt-20\">\n        <div className=\"space-y-6 animate-pulse\">\n          <div className=\"flex items-center gap-2\">\n            <Skeleton className=\"h-5 w-24\" />\n          </div>\n          <Skeleton className=\"h-10 w-3/4 mx-auto\" />\n          <div className=\"flex justify-center gap-2\">\n            <Skeleton className=\"h-6 w-20\" />\n            <Skeleton className=\"h-6 w-24\" />\n            <Skeleton className=\"h-6 w-28\" />\n          </div>\n          <Skeleton className=\"h-24 w-full\" />\n          <Skeleton className=\"h-12 w-full\" />\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <Skeleton className=\"h-32 w-full\" />\n            <Skeleton className=\"h-32 w-full\" />\n            <Skeleton className=\"h-32 w-full\" />\n          </div>\n          <Skeleton className=\"h-10 w-full\" />\n          <Skeleton className=\"h-64 w-full\" />\n        </div>\n      </div>\n    )\n  }\n\n  if (error) {\n    return (\n      <div className=\"container max-w-3xl mx-auto py-10 mt-20 text-center\">\n        <Alert variant=\"destructive\" className=\"text-left\">\n          <AlertCircle className=\"h-4 w-4\" />\n          <AlertDescription>{error}</AlertDescription>\n        </Alert>\n        <div className=\"mt-6 flex justify-center gap-4\">\n          <Button variant=\"outline\" onClick={() => router.push(\"/campaigns\")}>\n            <ArrowLeft className=\"h-4 w-4 mr-2\" />\n            Back to Campaigns\n          </Button>\n          <Button onClick={fetchCampaignData}>\n            <RefreshCw className=\"h-4 w-4 mr-2\" />\n            Retry\n          </Button>\n        </div>\n      </div>\n    )\n  }\n\n  if (!campaignInfo) {\n    return (\n      <div className=\"container max-w-3xl mx-auto py-10 mt-20 text-center\">\n        <Alert>\n          <AlertCircle className=\"h-4 w-4\" />\n          <AlertDescription>Campaign data could not be loaded.</AlertDescription>\n        </Alert>\n        <Button variant=\"outline\" className=\"mt-4\" onClick={() => router.push(\"/campaigns\")}>\n          <ArrowLeft className=\"h-4 w-4 mr-2\" />\n          Back to Campaigns\n        </Button>\n      </div>\n    )\n  }\n\n  // Main Render\n  return (\n    <div className=\"container max-w-5xl mx-auto py-10 mt-20\">\n      {/* Back button */}\n      <div className=\"mb-6\">\n        <Link\n          href=\"/campaigns\"\n          className=\"inline-flex items-center text-sm text-muted-foreground hover:text-foreground\"\n        >\n          <ArrowLeft className=\"h-4 w-4 mr-2\" />\n          Back to Campaigns\n        </Link>\n      </div>\n\n      {/* Campaign Title */}\n      <div className=\"text-center mb-8\">\n        <h1 className=\"text-3xl md:text-4xl font-bold tracking-tight break-words\">{campaignInfo.description}</h1>\n        <div className=\"flex justify-center items-center flex-wrap gap-2 mt-3\">\n          <Badge\n            variant={isDuringVoting ? \"default\" : isAfterEnd ? \"secondary\" : \"outline\"}\n            className={\n              isDuringVoting ? \"bg-green-600 hover:bg-green-700\" : isAfterEnd ? \"\" : \"text-blue-600 border-blue-300\"\n            }\n          >\n            {isBeforeStart ? \"Upcoming\" : isDuringVoting ? \"Active\" : \"Ended\"}\n          </Badge>\n          <Badge variant=\"outline\">{campaignInfo.votingType === 0 ? \"Candidate-Based\" : \"Proposal-Based\"}</Badge>\n          <Badge variant=\"outline\">\n            {campaignInfo.restriction === 0\n              ? \"Open To All\"\n              : campaignInfo.restriction === 1\n                ? \"Limited (Token Gated)\"\n                : \"Registration Required\"}\n          </Badge>\n          {isCandidate && (\n            <Badge variant=\"outline\" className=\"bg-purple-50 text-purple-600 border-purple-200\">\n              <Award className=\"h-3 w-3 mr-1\" /> You are a Candidate\n            </Badge>\n          )}\n        </div>\n        <p className=\"text-sm text-muted-foreground mt-3\">Created by: {formatAddress(campaignInfo.creator)}</p>\n      </div>\n\n      {/* Countdown Timer Card */}\n      <Card className=\"mb-6 border-border/50 bg-background/50 backdrop-blur-sm\">\n        <CardContent className=\"pt-6 text-center\">\n          <h2 className=\"text-lg font-semibold mb-4 text-muted-foreground\">\n            {isBeforeStart ? \"Voting Starts In\" : isDuringVoting ? \"Voting Ends In\" : \"Campaign Ended\"}\n          </h2>\n          {!isAfterEnd ? (\n            <CampaignCountdown\n              endTime={isBeforeStart ? campaignInfo.startTime : campaignInfo.endTime}\n              className=\"max-w-md mx-auto text-2xl md:text-3xl font-semibold\"\n            />\n          ) : (\n            <div className=\"text-lg font-medium text-muted-foreground\">The voting period is over.</div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Status Message */}\n      <div className=\"mb-6\">{getStatusMessage()}</div>\n\n      {/* Campaign Stats Grid */}\n      <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 mb-8\">\n        <Card className=\"border-border/50 bg-background/50 backdrop-blur-sm\">\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-start gap-3\">\n              <CalendarClock className=\"h-5 w-5 text-primary flex-shrink-0 mt-1\" />\n              <div>\n                <h3 className=\"font-semibold text-base\">Timeline</h3>\n                <div className=\"text-sm text-muted-foreground mt-1 space-y-0.5\">\n                  <div>Start: {formatDate(campaignInfo.startTime)}</div>\n                  <div>End: {formatDate(campaignInfo.endTime)}</div>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"border-border/50 bg-background/50 backdrop-blur-sm\">\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-start gap-3\">\n              <Users className=\"h-5 w-5 text-primary flex-shrink-0 mt-1\" />\n              <div>\n                <h3 className=\"font-semibold text-base\">Participation</h3>\n                <div className=\"text-sm text-muted-foreground mt-1 space-y-0.5\">\n                  <div>Total Votes Cast: {campaignInfo.totalVotes}</div>\n                  {campaignInfo.restriction !== 0 && <div>Registered: {campaignInfo.registeredVoterCount}</div>}\n                  <div>\n                    {campaignInfo.votingType === 0 ? \"Candidates\" : \"Proposals\"}: {campaignInfo.itemCount}\n                  </div>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"border-border/50 bg-background/50 backdrop-blur-sm\">\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-start gap-3\">\n              <Clock className=\"h-5 w-5 text-primary flex-shrink-0 mt-1\" />\n              <div>\n                <h3 className=\"font-semibold text-base\">Your Status</h3>\n                <div className=\"text-sm text-muted-foreground mt-1 space-y-0.5\">\n                  <div>Campaign: {isBeforeStart ? \"Upcoming\" : isDuringVoting ? \"Active\" : \"Ended\"}</div>\n                  {isConnected ? (\n                    <>\n                      {campaignInfo.restriction !== 0 && (\n                        <div>\n                          Eligibility:{\" \"}\n                          {userRegistered || isCandidate ? (\n                            <span className=\"text-green-600\">Eligible</span>\n                          ) : (\n                            <span className=\"text-red-600\">Not Eligible/Registered</span>\n                          )}\n                        </div>\n                      )}\n                      {isCandidate && (\n                        <div>\n                          Role: <span className=\"text-purple-600\">Candidate</span>\n                        </div>\n                      )}\n                      <div>\n                        Vote Status:{\" \"}\n                        {userVoted ? <span className=\"text-green-600\">Voted</span> : <span>Not Voted Yet</span>}\n                      </div>\n                    </>\n                  ) : (\n                    <div>\n                      <Button variant=\"link\" size=\"sm\" className=\"p-0 h-auto\" onClick={connectWallet}>\n                        Connect wallet\n                      </Button>{\" \"}\n                      to check\n                    </div>\n                  )}\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {campaignInfo?.votingType === 0 &&\n        candidates.some((c) => c.statement === \"Loading statement from blockchain...\") && (\n          <Alert className=\"mb-4 bg-blue-50 dark:bg-blue-950/20 border-blue-200 dark:border-blue-900/50\">\n            <AlertDescription className=\"flex items-center\">\n              <RefreshCw className=\"h-4 w-4 mr-2 animate-spin\" />\n              Loading candidate details from blockchain...\n            </AlertDescription>\n          </Alert>\n        )}\n\n      {/* Tabs */}\n      <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-2 sm:grid-cols-3 md:grid-cols-4 mb-6\">\n          <TabsTrigger value=\"overview\">Overview</TabsTrigger>\n\n          {/* Only show Register tab if not already registered as voter or candidate */}\n          {isBeforeStart && campaignInfo.restriction === 2 && !userRegistered && !isCandidate && isConnected && (\n            <TabsTrigger value=\"register\">Register</TabsTrigger>\n          )}\n\n          {isDuringVoting && (userRegistered || isCandidate) && !userVoted && isConnected && (\n            <TabsTrigger value=\"vote\">Vote</TabsTrigger>\n          )}\n\n          {(isDuringVoting || isAfterEnd || (isOwner && isConnected)) && (\n            <TabsTrigger value=\"results\">Results</TabsTrigger>\n          )}\n        </TabsList>\n\n        <TabsContent value=\"overview\">\n          <OverviewTab\n            campaignInfo={campaignInfo}\n            proposals={proposals}\n            candidates={candidates}\n            isOwner={isOwner}\n            isCandidate={isCandidate}\n            isBeforeStart={isBeforeStart}\n            isDuringVoting={isDuringVoting}\n            isAfterEnd={isAfterEnd}\n            contract={contract}\n            campaignId={campaignId}\n          />\n        </TabsContent>\n\n        {isBeforeStart && campaignInfo.restriction === 2 && !userRegistered && !isCandidate && isConnected && (\n          <TabsContent value=\"register\">\n            <RegisterTab\n              campaignInfo={campaignInfo}\n              contract={contract}\n              campaignId={campaignId}\n              isConnected={isConnected}\n              connectWallet={connectWallet}\n              onRegistrationSuccess={handleRegistrationSuccess}\n            />\n          </TabsContent>\n        )}\n\n        {isDuringVoting && (userRegistered || isCandidate) && !userVoted && isConnected && (\n          <TabsContent value=\"vote\">\n            <VoteTab\n              campaignInfo={campaignInfo}\n              proposals={proposals}\n              candidates={candidates}\n              contract={contract}\n              campaignId={campaignId}\n              isConnected={isConnected}\n              connectWallet={connectWallet}\n              onVoteSuccess={handleVoteSuccess}\n            />\n          </TabsContent>\n        )}\n\n        {(isDuringVoting || isAfterEnd || (isOwner && isConnected)) && (\n          <TabsContent value=\"results\">\n            <ResultsTab\n              campaignInfo={campaignInfo}\n              proposals={proposals}\n              candidates={candidates}\n              isOwner={isOwner}\n              isDuringVoting={isDuringVoting}\n              isAfterEnd={isAfterEnd}\n            />\n          </TabsContent>\n        )}\n      </Tabs>\n    </div>\n  )\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}