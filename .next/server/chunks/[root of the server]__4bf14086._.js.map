{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 164, "column": 0}, "map": {"version":3,"sources":["file:///mnt/windows_d/manov/code/polytix-v1/app/api/upload/route.js"],"sourcesContent":["import { NextResponse } from \"next/server\"\nimport axios from \"axios\"\nimport FormData from \"form-data\"\n\n// Pinata API keys - in production, these should be environment variables\nconst PINATA_API_KEY = process.env.PINATA_API_KEY || \"221a8742fda0ee67a6ea\"\nconst PINATA_SECRET_API_KEY = process.env.PINATA_SECRET_API_KEY || \"ee788b80dd939458253f1419c01ab4d0fbaa74acb69767fcefaf870fcbfaef1d\"\n\nexport async function POST(request) {\n  try {\n    const formData = await request.formData()\n    const file = formData.get(\"file\") \n\n    if (!file) {\n      return NextResponse.json({ error: \"No file provided\" }, { status: 400 })\n    }\n\n    // Convert file to buffer\n    const buffer = Buffer.from(await file.arrayBuffer())\n\n    // Create form data for Pinata\n    const pinataFormData = new FormData()\n    pinataFormData.append(\"file\", buffer, {\n      filename: file.name,\n      contentType: file.type,\n    })\n\n    // Set metadata\n    const metadata = JSON.stringify({\n      name: file.name,\n      keyvalues: {\n        app: \"polytix-voting\",\n      },\n    })\n    pinataFormData.append(\"pinataMetadata\", metadata)\n\n    // Set options\n    const options = JSON.stringify({\n      cidVersion: 0,\n    })\n    pinataFormData.append(\"pinataOptions\", options)\n\n    // Upload to Pinata\n    const response = await axios.post(\"https://api.pinata.cloud/pinning/pinFileToIPFS\", pinataFormData, {\n      maxBodyLength: Number.POSITIVE_INFINITY,\n      headers: {\n        \"Content-Type\": `multipart/form-data; boundary=${pinataFormData.getBoundary()}`,\n        pinata_api_key: PINATA_API_KEY,\n        pinata_secret_api_key: PINATA_SECRET_API_KEY,\n      },\n    })\n\n    // Return the IPFS hash (CID)\n    return NextResponse.json({\n      success: true,\n      ipfsHash: response.data.IpfsHash,\n      pinataUrl: `https://gateway.pinata.cloud/ipfs/${response.data.IpfsHash}`,\n    })\n  } catch (error) {\n    console.error(\"Error uploading to Pinata:\", error)\n    return NextResponse.json({ error: \"Failed to upload file to IPFS\" }, { status: 500 })\n  }\n}\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AAEA,yEAAyE;AACzE,MAAM,iBAAiB,QAAQ,GAAG,CAAC,cAAc,IAAI;AACrD,MAAM,wBAAwB,QAAQ,GAAG,CAAC,qBAAqB,IAAI;AAE5D,eAAe,KAAK,OAAO;IAChC,IAAI;QACF,MAAM,WAAW,MAAM,QAAQ,QAAQ;QACvC,MAAM,OAAO,SAAS,GAAG,CAAC;QAE1B,IAAI,CAAC,MAAM;YACT,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAmB,GAAG;gBAAE,QAAQ;YAAI;QACxE;QAEA,yBAAyB;QACzB,MAAM,SAAS,OAAO,IAAI,CAAC,MAAM,KAAK,WAAW;QAEjD,8BAA8B;QAC9B,MAAM,iBAAiB,IAAI,kJAAA,CAAA,UAAQ;QACnC,eAAe,MAAM,CAAC,QAAQ,QAAQ;YACpC,UAAU,KAAK,IAAI;YACnB,aAAa,KAAK,IAAI;QACxB;QAEA,eAAe;QACf,MAAM,WAAW,KAAK,SAAS,CAAC;YAC9B,MAAM,KAAK,IAAI;YACf,WAAW;gBACT,KAAK;YACP;QACF;QACA,eAAe,MAAM,CAAC,kBAAkB;QAExC,cAAc;QACd,MAAM,UAAU,KAAK,SAAS,CAAC;YAC7B,YAAY;QACd;QACA,eAAe,MAAM,CAAC,iBAAiB;QAEvC,mBAAmB;QACnB,MAAM,WAAW,MAAM,uIAAA,CAAA,UAAK,CAAC,IAAI,CAAC,kDAAkD,gBAAgB;YAClG,eAAe,OAAO,iBAAiB;YACvC,SAAS;gBACP,gBAAgB,CAAC,8BAA8B,EAAE,eAAe,WAAW,IAAI;gBAC/E,gBAAgB;gBAChB,uBAAuB;YACzB;QACF;QAEA,6BAA6B;QAC7B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,UAAU,SAAS,IAAI,CAAC,QAAQ;YAChC,WAAW,CAAC,kCAAkC,EAAE,SAAS,IAAI,CAAC,QAAQ,EAAE;QAC1E;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,8BAA8B;QAC5C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAgC,GAAG;YAAE,QAAQ;QAAI;IACrF;AACF","debugId":null}}]
}